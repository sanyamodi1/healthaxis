generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  NURSE
  DOCTOR
  LAB_TECHNICIAN
  PATIENT
  CASHIER
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JOBTYPE {
  FULL
  PART
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
}

enum PaymentStatus {
  PAID
  UNPAID
  PART
}

model Patient {
  id                       String   @id
  first_name               String
  last_name                String
  date_of_birth            DateTime
  gender                   GENDER   @default(MALE)
  phone                    String
  email                    String   @unique
  marital_status           String
  address                  String
  emergency_contact_name   String
  emergency_contact_number String
  relation                 String
  blood_group              String?
  allergies                String?
  medical_conditions       String?
  medical_history          String?
  insurance_provider       String?
  insurance_number         String?
  privacy_consent          Boolean
  service_consent          Boolean
  medical_consent          Boolean
  img                      String?
  colorCode                String?

  appointments Appointment[]
  medical      MedicalRecords[]
  payments     Payment[]
  ratings      Rating[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Doctor {
  id                  String  @id
  email               String  @unique
  name                String
  specialization      String
  license_number      String
  phone               String
  address             String
  department          String?
  img                 String?
  availability_status String?
  type                JOBTYPE @default(FULL)
  colorCode           String?

  working_days WorkingDays[]
  appointments Appointment[]
  ratings      Rating[]
  diagnosis    Diagnosis[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model WorkingDays {
  id         Int    @id @default(autoincrement())
  doctor_id  String
  day        String
  start_time String
  close_time String

  doctor Doctor @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Staff {
  id             String  @id
  name           String
  email          String  @unique
  phone          String
  address        String
  department     String?
  img            String?
  license_number String?

  role   Role
  status Status @default(ACTIVE)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Appointment {
  id              Int               @id @default(autoincrement())
  patient_id      String
  doctor_id       String
  appointmentDate DateTime
  appointmentTime String
  status          AppointmentStatus @default(PENDING)
  type            String
  note            String?
  patient         Patient           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor          Doctor            @relation(fields: [doctor_id], references: [id])

  bills   Payment[]
  medical MedicalRecords[]

  reason     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Payment {
  id             Int      @id @default(autoincrement())
  bill_id        Int?
  patient_id     String
  appointment_Id Int      @unique
  bill_date      DateTime
  payment_Date   DateTime
  discount       Float
  total_amount   Float
  amount_paid    Float

  payment_method PaymentMethod @default(CASH)
  status         PaymentStatus @default(UNPAID)
  receipt_number Int           @default(autoincrement())

  appointment Appointment    @relation(fields: [appointment_Id], references: [id], onDelete: Cascade)
  patient     Patient        @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  bills       PatientBills[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PatientBills {
  id           Int      @id @default(autoincrement())
  bill_id      Int
  service_id   Int
  service_date DateTime
  quantity     Int
  unit_cost    Float
  total_cost   Float
  service      Services @relation(fields: [service_id], references: [id])
  payment      Payment  @relation(fields: [bill_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model LabTest {
  id         Int      @id @default(autoincrement())
  record_id  Int
  test_date  DateTime
  result     String
  status     String
  notes      String
  service_id Int      @unique
  services   Services @relation(fields: [service_id], references: [id])

  medical_record MedicalRecords @relation(fields: [record_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model MedicalRecords {
  id             Int     @id @default(autoincrement())
  patient_id     String
  appointment_id Int
  doctor_id      String
  treatment_plan String?
  prescriptions  String?
  lab_request    String?

  appointment Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient     Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  lab_test    LabTest[]
  notes       String?

  vital_signs VitalSigns[]
  diagnosis   Diagnosis[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model VitalSigns {
  id                Int            @id @default(autoincrement())
  patient_id        String
  medical_id        Int
  medical           MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
  body_temperature  Float
  systolic          Int
  diastolic         Int
  heartRate         String
  respiratoryRate   Int?
  oxygen_saturation Int?
  weight            Float?
  height            Float?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Diagnosis {
  id                     Int            @id @default(autoincrement())
  patient_id             String
  medical_id             Int
  medical                MedicalRecords @relation(fields: [medical_id], references: [id])
  diagnosis              String
  doctor_id              String
  doctor                 Doctor         @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  symptoms               String
  notes                  String?
  prescribed_medications String?
  follow_up_plan         String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AuditLog {
  id        Int     @id @default(autoincrement())
  user_id   String
  record_id String
  action    String
  details   String?
  model     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Rating {
  id         Int     @id @default(autoincrement())
  patient_id String
  staff_id   String
  rating     Int
  comment    String?

  doctor  Doctor  @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  patient Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Services {
  id           Int            @id @default(autoincrement())
  service_name String
  description  String
  price        Float
  labtest      LabTest?
  bills        PatientBills[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
